// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
    id  String  @id  @default(auto()) @map("_id") @db.ObjectId   // mapping id with mongodb _id 
    name String 
    username String @unique
    email String @unique 
    photo_url String?
    photo_public_id String?
    password String
    role String @default("user") // default is user in case of creating user we will check what is role if on normal routes user tries to make him admin it will throw error  There will be a special route to make a user admin that will be accessed  by a secret key stored in database/app/company localfiles or only admins will know also that key would be updatable with three layer security
    active Boolean @default(true)
    refreshToken String @default("")
    passwordResetToken String?
    passwordResetExpires DateTime? 
    isMFAEnabled Boolean @default(false)
    MFASecretKey String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    notifications Notifications[] // Establishing one-to-many relationship can be empty as well
    employee Employee[]  // // Establishing one-to-many relationship can be empty as well
   
   
    @@map("User")
}


model Employee {
  id String @id @default(auto()) @map("_id") @db.ObjectId   // mapping id with mongodb _id 
  phoneNum Int @unique
  positionDesc String?
  departmentId String @db.ObjectId
  joinedAt DateTime @default(now())
  salary Int @default(0)
  isActive Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // setting one-many relationship
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  positionId String @db.ObjectId
  position Position @relation(fields: [positionId], references: [id])
}


model Department {
  id String @id @default(auto()) @map("_id") @db.ObjectId   // mapping id with mongodb _id 
  name String @unique
  desc String?
  isActive Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project[]
  // @@index([name]) no need bcz due to the fact that Prisma automatically creates a unique index for any field marked with @unique. 

  @@map("Department")
}


model Position {
  id String @id @default(auto()) @map("_id") @db.ObjectId   // mapping id with mongodb _id 
  name String @unique // MD 1,2,3
  desc String?
  vacancy Int @default(0)  //  i.e no of jobs left for this specific position
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 // setting 
  employee Employee[] // 1-n
}

enum ProjectStatus {
  Active
  Inactive
  Completed
  Archieved
  Discarded
}

model Project {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId   // mapping id with mongodb _id 
  name        String         @unique
  desc        String?
  teamLead    String         @db.ObjectId
  members     String[]       @db.ObjectId
  manager     String         @db.ObjectId
  status      ProjectStatus  @default(Inactive)
  budget      Float          @default(0)
  deadline    DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  departmentId String        @db.ObjectId
  department  Department     @relation(fields: [departmentId], references: [id])
}


enum ApplicantionType {
  Employee
  Intern
  Visitor
}

model Applicantion {
  id String @id @default(auto()) @map("_id") @db.ObjectId   // mapping id with mongodb _id 
  phoneNum Int @unique
  type ApplicantionType @default(Employee)
  positionId String @db.ObjectId
  applicantDesc String?
  isActive Boolean @default(false) 
  appliedAt DateTime @default(now())
}




enum NotificationsState {
  Pending 
  Sent
  Recieved
}

model Notifications {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  type String
  message String
  status NotificationsState @default(Pending)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define a field to link to User
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
}
